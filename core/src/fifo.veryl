#[allow(missing_reset_statement)] // TODO: Not sure if this lint is correct.
module fifo #(
    param DATA_TYPE: type = logic,
    param WIDTH    : u32  = 2    ,
) (
    clk   : input  clock    ,
    rst   : input  reset    ,
    flush : input  logic    , /// When flush is true, it is initialized as when the reset signal is received.
    wready: output logic    ,
    wvalid: input  logic    ,
    wdata : input  DATA_TYPE,
    rready: input  logic    ,
    rvalid: output logic    ,
    rdata : output DATA_TYPE,
) {
    // Two or more vacancies
    var wready_two: logic;

    if WIDTH == 1 :width_one {
        always_comb {
            wready     = !rvalid || rready; // `|| rready`: Data can be overwritten even if it has already been stored.
            wready_two = 0;
        }
        always_ff {
            if_reset {
                rvalid = 0;
            } else {
                if flush {
                    rvalid = 0;
                } else {
                    if wready && wvalid {
                        rdata  = wdata;
                        rvalid = 1;
                    } else if rready {
                        rvalid = 0;
                    }
                }
            }
        }
    } else {
        type Ptr = logic<WIDTH>;

        var head      : Ptr;
        var tail      : Ptr;
        let tail_plus1: Ptr = tail + 1 as Ptr;
        let tail_plus2: Ptr = tail + 2 as Ptr;

        var mem: DATA_TYPE [2 ** WIDTH];

        always_comb {
            wready     = tail_plus1 != head;
            wready_two = wready && tail_plus2 != head;
            rvalid     = head != tail; // Is there at least one data in the FIFO?
            rdata      = mem[head];
        }

        always_ff {
            if_reset {
                head = 0;
                tail = 0;
            } else {
                if flush {
                    head = 0;
                    tail = 0;
                } else {
                    if wready && wvalid {
                        mem[tail] = wdata;
                        tail      = tail + 1;
                    }
                    if rready && rvalid {
                        head = head + 1;
                    }
                }
            }
        }
    }
}
