import corectrl::*;
import eei::*;

module core (
    clk     : input   clock                                    ,
    rst     : input   reset                                    ,
    i_membus: modport membus_if::<ILEN, XLEN>::master          ,
    d_membus: modport membus_if::<MEM_DATA_WIDTH, XLEN>::master,
) {
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // NOTE: if => instruction fetch
    var if_pc     : Addr;
    let if_pc_next: Addr = if_pc + 4;

    // FIFO
    struct if_fifo_type {
        addr: Addr,
        bits: Inst,
    }

    var if_fifo_wready: logic       ;
    var if_fifo_wvalid: logic       ;
    var if_fifo_wdata : if_fifo_type;
    var if_fifo_rready: logic       ;
    var if_fifo_rvalid: logic       ;
    var if_fifo_rdata : if_fifo_type;

    inst if_fifo: fifo #(
        DATA_TYPE: if_fifo_type,
        WIDTH    : 3           ,
    ) (
        clk                   ,
        rst                   ,
        flush : control_hazard,
        wready: if_fifo_wready,
        wvalid: if_fifo_wvalid,
        wdata : if_fifo_wdata ,
        rready: if_fifo_rready,
        rvalid: if_fifo_rvalid,
        rdata : if_fifo_rdata ,
    );

    // instruction fetch processing
    always_comb {
        // Fetch an instruction when there are at least two free FIFOs
        i_membus.valid = if_fifo.wready_two;
        i_membus.addr  = if_pc;
        i_membus.wen   = 0;
        i_membus.wdata = 'x; // do not use wdata

        if_fifo_rready = !memu_stall; //  When memunit is not in process, the instruction can be taken out of the FIFO
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    var if_is_requested       : logic; // Is fetching
    var if_pc_requested       : Addr ; // requested address
    var control_hazard        : logic;
    var control_hazard_pc_next: Addr ;

    /// Is a branch instruction?
    function inst_is_br (
        ctrl: input InstCtrl,
    ) -> logic {
        return ctrl.itype == InstType::B;
    }

    // 1 if it is an unconditional jump instruction such as `jal` or a conditional jump such as `beq`
    // In this case, it means that the value of PC register is rewritten.
    assign control_hazard         = inst_valid && (inst_ctrl.is_jump || inst_is_br(inst_ctrl) && brunit_take);
    assign control_hazard_pc_next = if inst_is_br(inst_ctrl) {
        inst_pc + inst_imm
    } else {
        alu_result
    };

    always_ff {
        if_reset {
            if_pc           = 0;
            if_is_requested = 0;
            if_pc_requested = 0;
            if_fifo_wvalid  = 0;
            if_fifo_wdata   = 0;
        } else {
            if control_hazard {
                if_pc           = control_hazard_pc_next;
                if_is_requested = 0;
                if_fifo_wvalid  = 0;
            } else {
                if if_is_requested {
                    if i_membus.rvalid {
                        if_is_requested = i_membus.ready && i_membus.valid;
                        if i_membus.ready && i_membus.valid {
                            if_pc           = if_pc_next;
                            if_pc_requested = if_pc;
                        }
                    }
                } else {
                    if i_membus.ready && i_membus.valid {
                        if_is_requested = 1;
                        if_pc           = if_pc_next;
                        if_pc_requested = if_pc;
                    }
                }

                // Control FIFO of IF
                if if_is_requested && i_membus.rvalid { // when fetched
                    if_fifo_wvalid     = 1;
                    if_fifo_wdata.addr = if_pc_requested;
                    if_fifo_wdata.bits = i_membus.rdata;
                } else {
                    if if_fifo_wvalid && if_fifo_wready { // when data can be stored in the FIFO
                        if_fifo_wvalid = 0;
                    }
                }
            }
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Decode

    let inst_pc  : Addr     = if_fifo_rdata.addr;
    let inst_bits: Inst     = if_fifo_rdata.bits;
    var inst_ctrl: InstCtrl;
    var inst_imm : UIntX   ;

    inst decoder: inst_decoder (
        bits: inst_bits,
        ctrl: inst_ctrl,
        imm : inst_imm ,
    );

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Read & Define registers

    var regfile: UIntX<32>; // Registers [xlen;32]

    // Register number(e.g. x1 -> 1)
    // # NOTE: Simple implementation
    // Since the location of bits representing registers is the same for different instruction formats,
    // here we will obtain the bits of one register each time for simplicity of implementation.
    let rs1_addr: logic<5> = inst_bits[19:15];
    let rs2_addr: logic<5> = inst_bits[24:20];

    let rs1_data: UIntX = if rs1_addr == 0 { // x0 to 0
        0
    } else {
        regfile[rs1_addr]
    };
    let rs2_data: UIntX = if rs2_addr == 0 {
        0
    } else {
        regfile[rs2_addr]
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ALU
    var op1       : UIntX;
    var op2       : UIntX;
    var alu_result: UIntX;

    always_comb {
        case inst_ctrl.itype {
            InstType::R, InstType::B: {
                                          op1 = rs1_data;
                                          op2 = rs2_data;
                                      }
            InstType::I, InstType::S: {
                                          op1 = rs1_data;
                                          op2 = inst_imm;
                                      }
            InstType::U, InstType::J: {
                                          op1 = inst_pc;
                                          op2 = inst_imm;
                                      }
            default: {
                         op1 = 'x;
                         op2 = 'x;
                     }
        }
    }

    inst alum: alu (
        ctrl  : inst_ctrl ,
        op1               ,
        op2               ,
        result: alu_result,
    );

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Control and Status Register

    var csru_rdata: UIntX;

    inst csru: csrunit (
        clk                       ,
        rst                       ,
        valid   : inst_valid      ,
        ctrl    : inst_ctrl       ,
        csr_addr: inst_bits[31:20],

        // |funct3|instruction|
        // |3'b001|   CSRRW   |
        // |3'b101|   CSRRWI  |
        // |3'b010|   CSRRS   |
        // |3'b110|   CSRRSI  |
        // |3'b011|   CSRRC   |
        // |3'b111|   CSRRCI  |
        //
        // - The 2nd bit == 1 => immediate value
        // - funct3[1:0] != 0 => valid csr instruction
        rs1: if inst_ctrl.funct3[2] == 1 && inst_ctrl.funct3[1:0] != 0 {
            {1'b0 repeat XLEN - $bits(rs1_addr), rs1_addr} // Extend rs1 with 0
        } else {
            rs1_data
        },
        rdata: csru_rdata                                                                                                                ,
    );

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Branch

    // This value affects the `control_hazard`(a jump instruction?) condition.
    var brunit_take: logic;

    inst bru: brunit (
        funct3: inst_ctrl.funct3,
        op1                     ,
        op2                     ,
        take  : brunit_take     ,
    );

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // MemUnit
    let inst_valid : logic = if_fifo_rvalid;
    var inst_is_new: logic; // Whether the instruction was supplied with the current clock

    var memu_rdata: UIntX;
    var memu_stall: logic;

    inst memu: memunit (
        clk                ,
        rst                ,
        valid : inst_valid ,
        is_new: inst_is_new,
        ctrl  : inst_ctrl  ,
        addr  : inst_imm   ,
        rs2   : rs2_data   ,
        rdata : memu_rdata ,
        stall : memu_stall ,
        membus: d_membus   ,
    );

    always_ff {
        if_reset {
            inst_is_new = 0;
        } else {
            if if_fifo_rvalid {
                inst_is_new = if_fifo_rready;
            } else {
                inst_is_new = 1;
            }
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Write back

    let rd_addr: logic<5> = inst_bits[11:7];
    let wb_data: UIntX    = if inst_ctrl.is_lui {
        inst_imm
    } else if inst_ctrl.is_jump {
        inst_pc + 4 // 4 is the instruction width of 32 bits (4 bytes) and the address of the next instruction
    } else if inst_ctrl.is_load {
        memu_rdata
    } else if inst_ctrl.is_csr {
        csru_rdata
    } else {
        alu_result
    };

    always_ff {
        // Write-back to the register is only required when the instruction has finished executing (i.e., only when `if_fifo_rready` is 1)
        if if_fifo_rvalid && if_fifo_rready && inst_ctrl.rwb_en {
            regfile[rd_addr] = wb_data;
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Debug

    var clock_count: u64;

    always_ff {
        if_reset {
            clock_count = 1;
        } else {
            clock_count = clock_count + 1;
            if inst_valid {
                $display("# %d", clock_count);
                $display("%h : %h", inst_pc, inst_bits);
                $display("  itype(0b) : %b", inst_ctrl.itype);
                $display("  imm       : %h", inst_imm);
                $display("  rs1[%d]   : %h", rs1_addr, rs1_data);
                $display("  rs2[%d]   : %h", rs2_addr, rs2_data);
                $display("  op1       : %h", op1);
                $display("  op2       : %h", op2);
                $display("  alu res   : %h", alu_result);
                if inst_ctrl.is_csr {
                    $display("  csr rdata : %h", csru_rdata);
                }
                if inst_is_br(inst_ctrl) {
                    $display("  br take   : %b", brunit_take);
                }
                if if_fifo_rready && inst_ctrl.rwb_en {
                    $display("  reg[%d]   <= %h", rd_addr, wb_data);
                }
                $display("  memu stall: %b", memu_stall);
                $display("  memu rdata: %h", memu_rdata);
            }
        }
    }
}
