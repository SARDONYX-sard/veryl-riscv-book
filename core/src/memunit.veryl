import eei::*;
import corectrl::*;

module memunit (
    clk   : input   clock                                    ,
    rst   : input   reset                                    ,
    valid : input   logic                                    ,
    is_new: input   logic                                    , /// whether the instruction is newly supplied
    ctrl  : input   InstCtrl                                 , /// InstCtrl of instruction
    addr  : input   Addr                                     , /// address to be accessed
    rs2   : input   UIntX                                    , /// data to be written by store instruction
    rdata : output  UIntX                                    , /// result of load instruction (valid when stall = 0)
    stall : output  logic                                    , /// memory access instruction not completed
    membus: modport membus_if::<MEM_DATA_WIDTH, XLEN>::master, /// interface with memory
) {
    /// Determine if an instruction accesses memory
    function inst_is_memop (
        ctrl: input InstCtrl,
    ) -> logic {
        return ctrl.itype == InstType::S || ctrl.is_load;
    }

    /// Determine if an instruction is a store instruction
    function inst_is_store (
        ctrl: input InstCtrl,
    ) -> logic {
        return inst_is_memop(ctrl) && !ctrl.is_load;
    }

    /// enum state of memunit
    enum State: logic<2> {
        Init, /// state that accepts instructions
        WaitReady, /// state that waits for memory operation to become available
        WaitValid, /// waits for memory operation to finish
    }

    var state: State;

    var req_wen  : logic                ;
    var req_addr : Addr                 ;
    var req_wdata: logic<MEM_DATA_WIDTH>;

    always_comb {
        // Memory access
        membus.valid = state == State::WaitReady;
        membus.addr  = req_addr;
        membus.wen   = req_wen;
        membus.wdata = req_wdata;
        // load result
        rdata = membus.rdata;
        // judge stall
        stall = valid & case state {
            State::Init     : is_new && inst_is_memop(ctrl),
            State::WaitReady: 1,
            State::WaitValid: !membus.rvalid,
            default         : 0,
        };
    }

    always_ff {
        if_reset {
            state     = State::Init;
            req_wen   = 0;
            req_addr  = 0;
            req_wdata = 0;
        } else {
            if valid {
                case state {
                    State::Init: if is_new & inst_is_memop(ctrl) {
                        state     = State::WaitReady;
                        req_wen   = inst_is_store(ctrl);
                        req_addr  = addr;
                        req_wdata = rs2;
                    }
                    State::WaitReady: if membus.ready {
                        state = State::WaitValid;
                    }
                    State::WaitValid: if membus.rvalid {
                        state = State::Init;
                    }
                    default: {}
                }
            }
        }
    }
}
