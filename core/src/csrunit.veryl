import eei::*;
import corectrl::*;

/// ctrl InstCtrl input InstCtrl of the instruction
/// csr_addr logic<12> input Address of the CSR specified by the instruction (upper 12 bits of the instruction)
module csrunit (
    clk     : input  clock       ,
    rst     : input  reset       ,
    valid   : input  logic       , /// Whether the valid logic input instruction is supplied?
    ctrl    : input  InstCtrl    , /// Decoded instruction
    csr_addr: input  logic   <12>, /// Address of the CSR specified by the instruction (upper 12 bits of the instruction)
    rs1     : input  UIntX       , /// rs1 UIntX input Value of rs1 when CSRR(W|S|C), Value of rs1 when CSRR(W|S|C)I, value of rs1 when CSRR(W|S|C)I, value of rs1 when CSRR(W|S|C)I, value of rs1 when CSRR(W|S|C)I is extended with zero
    rdata   : output UIntX       , /// Result of CSR read by CSR instruction
) {
    var mtvec: UIntX; // using the UIntX type under the assumption that MXLEN is as long as XLEN (32 for 32-bit).

    var wmask: UIntX; // write mask
    var wdata: UIntX; // write data

    always_comb {
        // read
        rdata = case csr_addr {
            CsrAddr::MTVEC: mtvec,
            default       : 'x,
        };
        // write
        wmask = case csr_addr {
            CsrAddr::MTVEC: MTVEC_WMASK,
            default       : 0,
        };
        wdata = case ctrl.funct3[1:0] {
            2'b01  : rs1, //          CSRRW: CSR = input register
            2'b10  : rdata | rs1, //  CSRRS: CSR = Previous CSR + input register
            2'b11  : rdata & ~rs1, // CSRRC: Preserve CSR bits where rs1 bits are 0
            default: 'x,
        } & wmask;
    }

    // Is CSRR(W|S|C)[I] instruction?
    let is_wsc: logic = ctrl.is_csr && ctrl.funct3[1:0] != 0;

    always_ff {
        if_reset {
            mtvec = 0;
        } else {
            if valid {
                if is_wsc {
                    case csr_addr {
                        CsrAddr::MTVEC: mtvec = wdata;
                        default       : {}
                    }
                }
            }
        }
    }
}
