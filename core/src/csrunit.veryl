import eei::*;
import corectrl::*;

/// ctrl InstCtrl input InstCtrl of the instruction
/// csr_addr logic<12> input Address of the CSR specified by the instruction (upper 12 bits of the instruction)
module csrunit (
    clk        : input  clock       ,
    rst        : input  reset       ,
    valid      : input  logic       , /// Whether the valid logic input instruction is supplied?
    pc         : input  Addr        , /// Program counter
    ctrl       : input  InstCtrl    , /// Decoded instruction
    rd_addr    : input  logic   <5> , /// Address of the destination register
    csr_addr   : input  logic   <12>, /// Address of the CSR specified by the instruction (upper 12 bits of the instruction)
    rs1        : input  UIntX       , /// rs1 UIntX input Value of rs1 when CSRR(W|S|C), Value of rs1 when CSRR(W|S|C)I, value of rs1 when CSRR(W|S|C)I, value of rs1 when CSRR(W|S|C)I, value of rs1 when CSRR(W|S|C)I is extended with zero
    rdata      : output UIntX       , /// Result of CSR read by CSR instruction
    raise_trap : output logic       , /// Whether to raise an exception. When an exception occurs, the value is set to 1.
    trap_vector: output Addr        , /// Exception vector. When an exception occurs, the address of the jump destination is output.
) {
    var mtvec: UIntX; // using the UIntX type under the assumption that MXLEN is as long as XLEN (32 for 32-bit).

    var wmask : UIntX; // write mask
    var wdata : UIntX; // write data
    var mepc  : UIntX; // machine exception program counter
    var mcause: UIntX; // machine cause

    always_comb {
        // read
        rdata = case csr_addr {
            CsrAddr::MTVEC : mtvec,
            CsrAddr::MEPC  : mepc,
            CsrAddr::MCAUSE: mcause,
            default        : 'x,
        };
        // write
        wmask = case csr_addr {
            CsrAddr::MTVEC : MTVEC_WMASK,
            CsrAddr::MEPC  : MEPC_WMASK,
            CsrAddr::MCAUSE: MCAUSE_WMASK,
            default        : 0,
        };
        wdata = case ctrl.funct3[1:0] {
            2'b01  : rs1, //          CSRRW: CSR = input register
            2'b10  : rdata | rs1, //  CSRRS: CSR = Previous CSR + input register
            2'b11  : rdata & ~rs1, // CSRRC: Preserve CSR bits where rs1 bits are 0
            default: 'x,
        } & wmask;
    }

    // Is CSRR(W|S|C)[I] instruction?
    let is_wsc: logic = ctrl.is_csr && ctrl.funct3[1:0] != 0;

    // ecall(32bit: high <- low) fmt: { 12'b000000000000, 5'b00000, 3'b000, 5'b00000, 7'b1110011 }
    let is_ecall: logic = ctrl.is_csr && csr_addr == 0 && rs1[4:0] == 0 && ctrl.funct3 == 0 && rd_addr == 0;

    // Exception
    let raise_expt: logic = valid && is_ecall;
    let expt_cause: UIntX = CsrCause::ENVIRONMENT_CALL_FROM_M_MODE;

    // Trap
    assign raise_trap  = raise_expt;
    let trap_cause : UIntX = expt_cause;
    assign trap_vector = mtvec;

    always_ff {
        if_reset {
            mtvec = 0;
        } else {
            if valid {
                if raise_trap {
                    mepc   = pc;
                    mcause = trap_cause;
                } else {
                    if is_wsc {

                        case csr_addr {
                            CsrAddr::MTVEC : mtvec  = wdata;
                            CsrAddr::MEPC  : mepc   = wdata;
                            CsrAddr::MCAUSE: mcause = wdata;
                            default        : {}
                        }
                    }
                }
            }
        }
    }
}
