import eei::*;

module top #(
    param MEMORY_FILEPATH_IS_ENV: bit    = 1                 ,
    param MEMORY_FILEPATH       : string = "MEMORY_FILE_PATH",
) (
    clk: input clock,
    rst: input reset,
) {
    inst membus  : membus_if::<MEM_DATA_WIDTH, MEM_ADDR_WIDTH>; // <32, 16>
    inst i_membus: membus_if::<ILEN, XLEN>; // <32, 32>
    inst d_membus: membus_if::<MEM_DATA_WIDTH, XLEN>; // <32, 32>: For load & store instructions

    var memarb_last_i: logic;

    always_ff {
        if_reset {
            memarb_last_i = 0;
        } else {
            if membus.ready {
                memarb_last_i = !d_membus.valid;
            }
        }
    }

    inst mem: memory::<MEM_DATA_WIDTH, MEM_ADDR_WIDTH> #(
        FILEPATH_IS_ENV: MEMORY_FILEPATH_IS_ENV,
        FILEPATH       : MEMORY_FILEPATH       ,
    ) (
        clk     ,
        rst     ,
        membus  ,
    );

    /// NOTE bits -> bytes: MEM_DATA_WIDTH(32) / 8 = 4bytes
    /// [2^4+:16] => [16+:16] => [16:32] => 16bits
    function addr_to_memaddr (
        addr: input logic<XLEN>,
    ) -> logic<MEM_ADDR_WIDTH> {
        return addr[$clog2(MEM_DATA_WIDTH / 8)+:MEM_ADDR_WIDTH];
    }

    always_comb {
        i_membus.ready  = membus.ready && !d_membus.valid;
        i_membus.rvalid = membus.rvalid && memarb_last_i;
        i_membus.rdata  = membus.rdata;

        d_membus.ready  = membus.ready;
        d_membus.rvalid = membus.rvalid && !memarb_last_i; // <-  When the memory returns the result of the request, look at `memarb_last_i` and set the `rvalid` of either one of `i_membus` or `d_membus` to 1
        d_membus.rdata  = membus.rdata;

        membus.valid = i_membus.valid | d_membus.valid;

        // NOTE: Priority is given to `d_membus` over `i_membus` because the processing of load-store instructions does not proceed when instruction fetch is given priority.
        if d_membus.valid {
            membus.addr  = addr_to_memaddr(d_membus.addr);
            membus.wen   = d_membus.wen;
            membus.wdata = d_membus.wdata;
        } else {
            membus.addr  = addr_to_memaddr(i_membus.addr);
            membus.wen   = 0; // Instruction fetch is always read
            membus.wdata = 'x;
        }
    }

    inst c: core (
        clk       ,
        rst       ,
        i_membus  ,
        d_membus  ,
    );
}
